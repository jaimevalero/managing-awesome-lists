{"category_type":"topic","category_name":"computational-linguistics","repos_data":[{"full_name":"arbox/nlp-with-ruby","description":"Curated List: Practical Natural Language Processing done in Ruby","topics":["machine-learning","natural-language-processing","ruby","nlp","sentiment-analysis","pos-tag","awesome","awesome-list","list","computational-linguistics"],"created_at":"2016-03-15T20:56:12Z","pushed_at":"2023-06-27T09:38:04Z","stargazers_count":1028,"language":"Ruby"},{"full_name":"eselkin/awesome-computational-neuroscience","description":"A list of schools and researchers in computational neuroscience","topics":["awesome-list","awesome","computational-neuroscience","neuroscience","computational-biology","computational","computational-linguistics","computational-psychology","computational-psychiatry","mathematical-neuroscience"],"created_at":"2018-12-24T20:47:35Z","pushed_at":"2022-07-15T17:35:05Z","stargazers_count":614,"language":"unknown"},{"full_name":"proycon/pynlpl","description":"PyNLPl, pronounced as 'pineapple', is a Python library for Natural Language Processing. It contains various modules useful for common, and less common, NLP tasks. PyNLPl can be used for basic tasks such as the extraction of n-grams and frequency lists, and to build simple language model. There are also more complex data types and algorithms. Moreover, there are parsers for file formats common in NLP (e.g. FoLiA/Giza/Moses/ARPA/Timbl/CQL). There are also clients to interface with various NLP specific servers. PyNLPl most notably features a very extensive library for working with FoLiA XML (Format for Linguistic Annotation).","topics":["nlp","python","computational-linguistics","linguistics","library","folia","machine-learning","language-modelling","search-algorithms","evaluation-metrics"],"created_at":"2010-07-06T11:42:27Z","pushed_at":"2023-09-14T12:24:10Z","stargazers_count":469,"language":"Python"},{"full_name":"BLLIP/bllip-parser","description":"BLLIP reranking parser (also known as Charniak-Johnson parser, Charniak parser, Brown reranking parser) See http://pypi.python.org/pypi/bllipparser/ for Python module.","topics":["natural-language-processing","parsing","machine-learning","nlp","nlp-library","ai","artificial-intelligence","computational-linguistics"],"created_at":"2011-02-27T19:29:34Z","pushed_at":"2021-11-07T19:34:48Z","stargazers_count":225,"language":"Makefile"},{"full_name":"LanguageMachines/frog","description":"Frog is an integration of memory-based natural language processing (NLP) modules developed for Dutch. All NLP modules are based on Timbl, the Tilburg memory-based learning software package.","topics":["dutch","nlp","natural-language-processing","lemmatiser","pos-tagger","dependency-parser","named-entity-recognition","computational-linguistics","folia","morphological-analyser"],"created_at":"2014-06-05T13:39:28Z","pushed_at":"2023-12-05T14:43:08Z","stargazers_count":73,"language":"Shell"},{"full_name":"LanguageMachines/ucto","description":"Unicode tokeniser. Ucto tokenizes text files: it separates words from punctuation, and splits sentences. It offers several other basic preprocessing steps such as changing case that you can all use to make your text suited for further processing such as indexing, part-of-speech tagging, or machine translation.  Ucto comes with tokenisation rules for several languages and can be easily extended to suit other languages. It has been incorporated for tokenizing Dutch text in Frog, our Dutch morpho-syntactic processor. http://ilk.uvt.nl/ucto --","topics":["natural-language-processing","language","nlp","computational-linguistics","tokeniser","punctuation","folia"],"created_at":"2013-03-26T11:16:57Z","pushed_at":"2023-11-14T18:48:38Z","stargazers_count":61,"language":"Shell"},{"full_name":"proycon/python-ucto","description":"This is a Python binding to the tokenizer Ucto. Tokenisation is one of the first step in almost any Natural Language Processing task, yet it is not always as trivial a task as it appears to be. This binding makes the power of the ucto tokeniser available to Python. Ucto itself is regular-expression based, extensible, and advanced tokeniser written in C++ (http://ilk.uvt.nl/ucto).","topics":["nlp","computational-linguistics","python","tokenizer","text-processing","folia","nlp-library"],"created_at":"2014-05-21T17:28:45Z","pushed_at":"2023-10-31T15:07:18Z","stargazers_count":29,"language":"Python"}],"frecuent_topics":{"computational-linguistics":7,"nlp":6,"natural-language-processing":4,"folia":4,"machine-learning":3}}